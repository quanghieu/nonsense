/*(Copyright)
 *      Microsoft Copyright 2009 - 2015
 *      All rights reserved.
*/
/*(Auto)
    Automatically Generated by TpmPrototypes version 2.2 February 10, 2016 
    Date: Sep 22, 2016 Time: 05:27:05 PM  
*/

#ifndef    _TPMTOMSBNMATH_FP_H_
#define    _TPMTOMSBNMATH_FP_H_

#if MATH_LIB == MSBN
//*** BnModMult()
// Does multiply and divide returning the remainder of the divide.
LIB_EXPORT BOOL
BnModMult(
    bigNum              result,
    bigConst            op1,
    bigConst            op2,
    bigConst            modulus
    );

//*** BnMult()
// Multiplies two numbers
LIB_EXPORT BOOL
BnMult(
    bigNum           result,
    bigConst         multiplicand,
    bigConst         multiplier
    );

//*** BnDiv()
// This function divides two BIGNUM values.
LIB_EXPORT BOOL
BnDiv(
    bigNum               quotient,
    bigNum               remainder,
    bigConst             dividend,
    bigConst             divisor
    );

#ifdef TPM_ALG_RSA
//*** BnGcd()
// Get the greatest common divisor of two numbers
LIB_EXPORT BOOL
BnGcd(
    bigNum      gcd,            // OUT: the common divisor
    bigConst    number1,        // IN:
    bigConst    number2         // IN:
    );

//***BnModExp()
// Do modular exponentiation using BIGNUM values. The conversion from a bignum_t
// to a BIGNUM is trivial as they are based on the same structure
LIB_EXPORT BOOL
BnModExp(
    bigNum               result,         // OUT: the result
    bigConst             number,         // IN: number to exponentiate
    bigConst             exponent,       // IN:
    bigConst             modulus         // IN:
    );

//*** BnModInverse()
// Modular multiplicative inverse
LIB_EXPORT BOOL
BnModInverse(
    bigNum               result,
    bigConst             number,
    bigConst             modulus
    );
#endif // TPM_ALG_RSA

#if defined TPM_ALG_ECC
//*** BnPointToMsBnPoint()
// Convert a point in TPM BigNum format to a point in MsBn format. If 'P' is NULL,
// or there is an error, then the function returns a NULL pointer
// return type: msBnPoint
//  NULL        error or P is NULL
//  bnP         conversion OK
msBnPoint
BnPointToMsBnPoint(
    msBnPoint            bnP,       // OUT: address to receive the converted point
    pointConst           P,         // IN: the point to convert
    bigCurve             E,         // IN: curve structure
    pMsbnCtx             pBigCtx    // IN: the working context for memory allocation
    );

//*** BnEccModMult()
// This function does a point multiply of the form R = [d]S
// return type: BOOL
//  FALSE       failure in operation; treat as result being point at infinity
LIB_EXPORT BOOL
BnEccModMult(
    bigPoint             R,         // OUT: computed point
    pointConst           S,         // IN: point to multiply by 'd'
    bigConst             d,         // IN: scalar for [d]S
    bigCurve             E
    );

//*** BnEccModMult2()
// This function does a point multiply of the form R = [d]S + [u]Q
// return type: BOOL
//  FALSE       failure in operation; treat as result being point at infinity
LIB_EXPORT BOOL
BnEccModMult2(
    bigPoint             R,         // OUT: computed point
    pointConst           S,         // IN: first point (optional)
    bigConst             d,         // IN: scalar for [d]S or [d]G
    pointConst           Q,         // IN: second point
    bigConst             u,         // IN: second scalar
    bigCurve             E          // IN: curve
    );

//** BnEccAdd()
// This function does addition of two points.
// return type: BOOL
//  FALSE       failure in operation; treat as result being point at infinity
LIB_EXPORT BOOL
BnEccAdd(
    bigPoint             R,         // OUT: computed point
    pointConst           S,         // IN: point to multiply by 'd'
    pointConst           Q,         // IN: second point
    bigCurve             E          // IN: curve
    );

//*** BnCurveInit()
// This function will initialize a the MsBn curve structure.
bigCurve
BnCurveInit(
    TPM_ECC_CURVE            curveID,       // IN: the ID for the curve
    crypt_uword_t           *buffer,        // OUT: the buffer to receive the
                                            //      bigCurve structure and the MsBn
                                            //      curve structure.
    crypt_uword_t            wordCount      // IN:  number of crypt words in buffer
    );
#endif // TPM_ALG_ECC
#endif // MATH_LIB == LTC


#endif  // _TPMTOMSBNMATH_FP_H_
